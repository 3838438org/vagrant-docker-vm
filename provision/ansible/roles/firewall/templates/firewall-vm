#!/bin/bash
### BEGIN INIT INFO
# Provides:          firewall
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: Start/stop firewall-vm
### END INIT INFO

IPTABLES='/sbin/iptables'
FIREWALL_INFOMSG=1

DEFAULT_GW_IP="$(/sbin/ip route | awk '/default/ { print $3 }')"

#################################################
### Function firewall_ruleset_standard
function firewall_ruleset_standard() {
    # reset bridge-rules
    $IPTABLES -F bridge-rules
    $IPTABLES -X bridge-rules
    $IPTABLES -N bridge-rules

    # reset reject-rules
    $IPTABLES -F reject-rules
    $IPTABLES -X reject-rules
    $IPTABLES -N reject-rules


    ## default policy rules
    firewall_infomsg "[CHAIN:DEFAULT] reject-rules"
    $IPTABLES -A reject-rules -p tcp -j REJECT --reject-with tcp-reset
    $IPTABLES -A reject-rules -p udp -j REJECT --reject-with icmp-port-unreachable
    $IPTABLES -A reject-rules -j REJECT --reject-with icmp-port-unreachable

{% if PROVISION.mail %}

    #########################
    # Mail sandbox
    #########################

    ## redirect all smtp traffic to internal server
    firewall_infomsg "[CHAIN:ROUTING] main sandbox"
    $IPTABLES -t nat -A OUTPUT -p tcp --dport  25 -j DNAT --to-destination 127.0.0.1:25
    $IPTABLES -t nat -A OUTPUT -p tcp --dport 587 -j DNAT --to-destination 127.0.0.1:25

    $IPTABLES -t nat -I PREROUTING 1 -p tcp --dport 25 -j DNAT --to-destination "127.0.0.1"
    $IPTABLES -t nat -I POSTROUTING 1 -p tcp -d "127.0.0.1" --dport 25 -j MASQUERADE

    $IPTABLES -t nat -I PREROUTING 1 -p tcp --dport 587 -j DNAT --to-destination "127.0.0.1:25"
    $IPTABLES -t nat -I POSTROUTING 1 -p tcp -d "127.0.0.1" --dport 587 -j MASQUERADE

{% endif %}


{% if FIREWALL is defined and FIREWALL.rules is defined %}
    firewall_infomsg "[CHAIN:FIREWALL.rules] Firewall rules"
    $IPTABLES -N "FIREWALL.rules" || true
    $IPTABLES -F "FIREWALL.rules"

    ## allow local connections
    $IPTABLES -A "FIREWALL.rules" --source "127.0.0.1/8" -j ACCEPT
    $IPTABLES -A "FIREWALL.rules" --destination "127.0.0.1/8" -j ACCEPT

    ## allow vagrant connection
    $IPTABLES -A "FIREWALL.rules" --source "${DEFAULT_GW_IP}/24" -j ACCEPT

    ## allow private network
    $IPTABLES -A "FIREWALL.rules" --source "{{VM.network.private.netmask}}" -j ACCEPT

    ## allow ssh
    $IPTABLES -A "FIREWALL.rules" --protocol tcp --dport 22 --source 10.0.0.0/8      -j ACCEPT
    $IPTABLES -A "FIREWALL.rules" --protocol tcp --dport 22 --source 172.16.0.0/12   -j ACCEPT
    $IPTABLES -A "FIREWALL.rules" --protocol tcp --dport 22 --source 192.168.56.0/16 -j ACCEPT

    ## allow related (active) connections
    $IPTABLES -A "FIREWALL.rules" -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    ## custom rules
    {% for rule in FIREWALL.rules %}
        {% if rule.port is defined and rule.port %}
    $IPTABLES -A "FIREWALL.rules" \
        --protocol "{{ rule.protocol }}" \
        --dport "{{ rule.port }}" \
        {% if rule.source is defined %}--source "{{ rule.source }}" {% endif %} -j ACCEPT
        {% endif %}
    {% endfor %}
    # reject all other traffic
    $IPTABLES -A "FIREWALL.rules" -j reject-rules

    $IPTABLES -A INPUT -j "FIREWALL.rules"
{% endif %}

}

#################################################
### Function firewall_ruleset_clear
function firewall_ruleset_clear() {
    ###################################
    ## Clearing chains
    ###################################
    $IPTABLES -F INPUT
    $IPTABLES -F OUTPUT

    #$IPTABLES -t nat -F
    #$IPTABLES -X

    ###################################
    ## Policy
    ###################################
    $IPTABLES -P FORWARD ACCEPT
    $IPTABLES -P INPUT   ACCEPT
    $IPTABLES -P OUTPUT  ACCEPT
}

function noop() {
    return
}

#################################################
### Function firewall_infomsg
function firewall_infomsg() {
    if [ "$FIREWALL_INFOMSG" -eq "1" ]; then
        echo " * $*"
    fi;
}

###############################################################################
start() {
    echo "Starting firewall: setting ruleset"
    firewall_ruleset_clear
    firewall_ruleset_standard
}

###############################################################################
# ACTION: STOP
stop() {
    echo "Stopping firewall: flushing ruleset"
    firewall_ruleset_clear
}

###############################################################################
# ACTION: SHOWSTATUS
showstatus() {
  echo "Status"
  $IPTABLES -L -n -v --line-numbers
  echo ""
  echo ""
  echo ""
  echo "NAT status"
  $IPTABLES -L -n -v --line-numbers -t nat
}

###############################################################################
# ACTION: RESTART
restart() {
    stop
    start
}


###############################################################################
# ACTION: SHOWOPTIONS
showoptions() {
  echo "Usage: $0 {start|stop|restart|showstatus}"
  echo "start)      will restore setting if exists else force rules"
  echo "stop)       delete all rules and set all to accept"
  echo "rules)      force settings of new rules"
  echo "showstatus) Shows the status"
}

case $1 in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        showstatus
        ;;
esac
## EOF ## EOF ## EOF ## EOF ## EOF ## EOF ## EOF ## EOF ## EOF ## EOF ## EOF ##
